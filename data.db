import pandas as pd
import sqlite3

def csv_to_db(file_path, db_name='data.db', table_name='data_table'):
    """Convert CSV file into an SQLite database."""
    # Load the CSV file
    df = pd.read_csv(file_path)

    # Connect to SQLite database (create if it doesn't exist)
    conn = sqlite3.connect(db_name)

    # Write the DataFrame into the SQLite table
    df.to_sql(table_name, conn, if_exists='replace', index=False)

    print(f"CSV data successfully added to the database '{db_name}' in table '{table_name}'.")
    conn.close()

# Run the script
if __name__ == '__main__':
    # Replace 'your_file.csv' with the path to your CSV file
    csv_file_path = 'your_file.csv'
    csv_to_db(csv_file_path)
#-----------------------
primary key
import pandas as pd
import sqlite3

def csv_to_db(file_path, db_name='data.db', table_name='data_table'):
    """Convert CSV file into an SQLite database with gti as primary key and auto-incremented rowid."""
    # Load the CSV file into a DataFrame
    df = pd.read_csv(file_path)

    # Connect to SQLite database (create if it doesn't exist)
    conn = sqlite3.connect(db_name)
    cursor = conn.cursor()

    # Create a new table with gti as the primary key and auto-incremented rowid
    cursor.execute(f'''
        CREATE TABLE IF NOT EXISTS {table_name} (
            rowid INTEGER PRIMARY KEY AUTOINCREMENT,  -- Auto-incremented rowid
            gti TEXT UNIQUE,                         -- gti as unique identifier
            taskid TEXT                              -- taskid column
        );
    ''')

    # Insert data from the DataFrame into the table
    for index, row in df.iterrows():
        cursor.execute(f'''
            INSERT OR REPLACE INTO {table_name} (gti, taskid) 
            VALUES (?, ?);
        ''', (row['gti'], row['taskid']))

    # Commit the transaction and close the connection
    conn.commit()
    print(f"CSV data successfully added to the database '{db_name}' in table '{table_name}'.")
    conn.close()

# Run the script
if __name__ == '__main__':
    # Replace 'your_file.csv' with the path to your CSV file
    csv_file_path = 'your_file.csv'
    csv_to_db(csv_file_path)



#--------------------

import pandas as pd
import sqlite3

# Connect to SQLite database
conn = sqlite3.connect('data.db')

# Load the table into a DataFrame
df = pd.read_sql('SELECT * FROM data_table', conn)

# Drop columns that start with "UNNAMED"
df = df.loc[:, ~df.columns.str.contains('^Unnamed')]

# Write the cleaned DataFrame back to the database
df.to_sql('data_table', conn, if_exists='replace', index=False)

print("UNNAMED columns removed successfully.")
conn.close()



#-----------------------------------------------------------------------------------


import sqlite3
from datetime import datetime

# Initialize SQLite database
conn = sqlite3.connect('identifiers.db')
cursor = conn.cursor()

# Create the table if not exists
cursor.execute('''
CREATE TABLE IF NOT EXISTS identifiers (
    id INTEGER PRIMARY KEY AUTOINCREMENT,
    date TEXT,
    identifier TEXT UNIQUE
)
''')
conn.commit()

def add_identifier(identifier):
    """Add a new identifier to the database."""
    try:
        date = datetime.now().strftime('%Y-%m-%d')
        cursor.execute('INSERT INTO identifiers (date, identifier) VALUES (?, ?)', (date, identifier))
        conn.commit()
        return {"isDuplicate": False, "message": "Identifier added successfully."}
    except sqlite3.IntegrityError:
        return {"isDuplicate": True, "message": "Duplicate identifier."}

def check_identifier(identifier):
    """Check if an identifier exists in the database."""
    cursor.execute('SELECT * FROM identifiers WHERE identifier = ?', (identifier,))
    return cursor.fetchone() is not None
